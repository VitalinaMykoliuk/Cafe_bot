import asyncio
from data.confige import *
from data.loader import *
from heandlers.admin_function import *
from services.api_sqlite import *
import logging
from os import path
from aiogram.dispatcher import FSMContext
from aiogram import executor, types
from key_boards.user_key_boards import *
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import re

users_cafe = Users()
menu_cafe = Menu()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer(f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ñ–µ *HAPPY* !!!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                                    reply_markup=menu_for_user, parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(text="üçΩ –ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞—Ñ–µ")
async def visit_cafe(message: types.Message):
    await message.answer(text='‚ñ™ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì '
                              '(–Ω–∞–ø—Ä–∏–º–µ—Ä, 14-07-2023):',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await storage.set_state(chat=message.from_user.id, state='reservation')


@dp.message_handler(state='reservation')
async def reservation(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    try:
        selected_date = datetime.strptime(message.text, '%d-%m-%Y')
    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14-07-2023).')
        return
    await state.update_data(selected_date=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +380663839245): ')
    await state.set_state(state='numbers')


@dp.message_handler(state='numbers')
async def numbers(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    phone_number = message.text.strip()
    phone_regex = r'^\+?[1-9]\d{1,14}$'
    if not re.match(phone_regex, phone_number):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX')
        return
    await state.update_data(selected_number=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
    await state.set_state(state='name')


@dp.message_handler(state='name')
async def name(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    name_pattern = r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$'
    if not re.match(name_pattern, message.text):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.')

    await state.update_data(selected_name=message.text)
    data = await state.get_data()

    await message.answer(f'–í–∞—à —Å—Ç–æ–ª–∏–∫ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω:\n–ü—Ä–æ–≤–µ—Ä—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n'
                         f'–î–∞—Ç–∞ –±—Ä–æ–Ω–∏: {data["selected_date"]}\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["selected_number"]}\n'
                         f'–í–∞—à–µ –∏–º—è: {data["selected_name"]}')
    await asyncio.sleep(1.5)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∂–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:\n*–î–∞* –∏–ª–∏ *–ù–µ—Ç*',
                                                                                   parse_mode=types.ParseMode.MARKDOWN)
    await state.set_state(state='result_1')


@dp.message_handler(state='result_1')
async def yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() == '–¥–∞':
        users_cafe.add_user(data['selected_name'], data['selected_number'], data["selected_date"])
        await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!!!\n\n¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!\n\n¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=menu_for_user,
                                                                                  parse_mode=types.ParseMode.MARKDOWN)
        await state.finish()
    else:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!!!\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:\n*–î–∞* –∏–ª–∏ *–ù–µ—Ç*',
                                                                                   parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
async def order_delivery(message: types.Message):
    menu_text = (
        "–ú–µ–Ω—é –∫–∞—Ñ–µ *HAPPY*! –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:\n\n"
        "*üçï –ü–∏—Ü—Ü–∞*\n(–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, –ö–∞—Ä–±–æ–Ω–∞—Ä–∞, –ß–µ—Ç—ã—Ä–µ —Å–µ–∑–æ–Ω–∞)\n\n"
        "*üçù –ü–∞—Å—Ç–∞*\n(–ö–∞–º–ø–∞–Ω–µ–ª–ª–µ, –ö–∞–Ω–Ω–µ–ª–ª–æ–Ω–∏, –ö–∞–∑–∞—Ä–µ—á—á–µ, –ö–∞–≤–∞—Ç–∞–ø–ø–∏)\n\n"
        "*ü•ó –°–∞–ª–∞—Ç*\n(–¶–µ–∑–∞—Ä—å, –ì—Ä–µ—á–µ—Å–∫–∏–π, –û–≤–æ—â–Ω–æ–π)\n\n"
        "*üç∞ –î–µ—Å–µ—Ä—Ç*\n(–¢–∏—Ä–∞–º–∏—Å—É, –ß–∏–∑–∫–µ–π–∫, –ù–∞–ø–æ–ª–µ–æ–Ω, –ú–µ–¥–æ–≤–∏–∫)\n\n"
        "*üçπ –ù–∞–ø–∏—Ç–∫–∏*\n(*–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏*: —á–µ—Ä–Ω—ã–π —á–∞–π, –∑–µ–ª–µ–Ω—ã–π —á–∞–π, –ª–∞—Ç—Ç–µ, –∫–∞–ø—É—á–∏–Ω–æ.\n*–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏:*"
        " –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å,"
        "–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫, —è–±–ª–æ—á–Ω—ã–π —Å–æ–∫, –∫–æ–∫–∞-–∫–æ–ª–∞, —Å–ø—Ä–∞–π—Ç)\n\n*‚úçÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*"
    )
    await message.answer(text=menu_text, reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"),
                         parse_mode=types.ParseMode.MARKDOWN)
    await storage.set_state(chat=message.from_user.id, state='menu')


@dp.message_handler(state='menu')
async def menu(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    await state.update_data(selected_menu=message.text)
    data = await state.get_data()
    print(data)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text}.")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +380663839245):')
    await state.set_state(state='numbers_two')


@dp.message_handler(state='numbers_two')
async def numbers(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    phone_number = message.text.strip()
    phone_regex = r'^\+?[1-9]\d{1,14}$'
    if not re.match(phone_regex, phone_number):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX')
        return
    await state.update_data(selected_number2=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
    await state.set_state(state='name_two')


@dp.message_handler(state='name_two')
async def name(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    name_pattern = r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$'
    if not re.match(name_pattern, message.text):
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.')

    await state.update_data(selected_name2=message.text)
    data = await state.get_data()
    print(data)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å(–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã/–∫–æ–º–Ω–∞—Ç—ã): ')
    await state.set_state(state='address')


@dp.message_handler(state='address')
async def address(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_for_user)
        await state.finish()
        return
    user_address = message.text
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å: {user_address}. –í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    await state.update_data(selected_address=message.text)
    data = await state.get_data()
    print(data)
    await message.answer(f'–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n{data["selected_menu"]}\n'
                         f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["selected_number2"]}\n'
                         f'–í–∞—à–µ –∏–º—è: {data["selected_name2"]}\n'
                         f'–í–∞—à –∞–¥—Ä–µ—Å: {data["selected_address"]}')
    await asyncio.sleep(1.5)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∂–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–π –∑–∞–∫–∞–∑?\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:\n*–î–∞* –∏–ª–∏ *–ù–µ—Ç*',
                                                                                  parse_mode=types.ParseMode.MARKDOWN)
    await state.set_state(state='result')


@dp.message_handler(state='result')
async def yes_yes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.lower() == '–¥–∞':
        menu_cafe.add_info_menu(data['selected_menu'], data['selected_number2'], data['selected_name2'],
                                                                                              data['selected_address'])
        await message.answer('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ *"HAPPY"*\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑'
                              '40 –º–∏–Ω—É—Ç!\n' '–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n*¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*',
                              reply_markup=menu_for_user,  parse_mode=types.ParseMode.MARKDOWN)
        await state.finish()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑!\n\n*¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!*', reply_markup=menu_for_user,
                                                                                   parse_mode=types.ParseMode.MARKDOWN)
        await state.finish()
    else:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!!!\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:\n*–î–∞* –∏–ª–∏ *–ù–µ—Ç*',
                                                                                   parse_mode=types.ParseMode.MARKDOWN)













